[2023-03-29 06:14:17,778] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2023-03-29 06:14:17,808] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2023-03-29 06:14:17,813] INFO [Controller id=0] Creating FeatureZNode at path: /feature with contents: FeatureZNode(2,Enabled,Map()) (kafka.controller.KafkaController)
[2023-03-29 06:14:17,842] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2023-03-29 06:14:17,847] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2023-03-29 06:14:17,849] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2023-03-29 06:14:17,852] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2023-03-29 06:14:17,876] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 25) (kafka.controller.KafkaController)
[2023-03-29 06:14:17,883] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2023-03-29 06:14:17,890] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2023-03-29 06:14:17,900] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2023-03-29 06:14:17,903] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2023-03-29 06:14:17,903] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-03-29 06:14:17,903] INFO [Controller id=0] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2023-03-29 06:14:17,904] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2023-03-29 06:14:17,907] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2023-03-29 06:14:17,907] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2023-03-29 06:14:17,908] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2023-03-29 06:14:17,908] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2023-03-29 06:14:17,910] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2023-03-29 06:14:17,925] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2023-03-29 06:14:17,928] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-03-29 06:14:17,933] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2023-03-29 06:14:17,935] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2023-03-29 06:14:17,936] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2023-03-29 06:14:17,937] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2023-03-29 06:14:17,938] INFO [RequestSendThread controllerId=0] Controller 0 connected to 192.168.0.106:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2023-03-29 06:14:17,943] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2023-03-29 06:14:17,943] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2023-03-29 06:14:17,952] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2023-03-29 06:14:17,952] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2023-03-29 06:14:17,953] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2023-03-29 06:14:17,953] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2023-03-29 06:14:17,955] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2023-03-29 06:14:17,975] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2023-03-29 06:14:22,977] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:14:22,978] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:15:33,913] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(OB9afBHtQoq_AdQyOARxUQ),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:15:33,914] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2023-03-29 06:15:53,130] INFO [Controller id=0] New topics: [Set(registered_users_1_part)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_users_1_part,Some(TZRac9T3Rj-6C13cp2eaQw),Map(registered_users_1_part-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:15:53,130] INFO [Controller id=0] New partition creation callback for registered_users_1_part-0 (kafka.controller.KafkaController)
[2023-03-29 06:15:53,163] INFO [Controller id=0] New topics: [Set(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(wjgIHAlMQq2J8UQA6Pzvyw),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), registered_user_2_partition-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:15:53,164] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0,registered_user_2_partition-1 (kafka.controller.KafkaController)
[2023-03-29 06:15:53,196] INFO [Controller id=0] New topics: [Set(message_to_fix_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(message_to_fix_partition,Some(HU0acjFwSai5oX_s7LFClg),Map(message_to_fix_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), message_to_fix_partition-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:15:53,196] INFO [Controller id=0] New partition creation callback for message_to_fix_partition-0,message_to_fix_partition-1 (kafka.controller.KafkaController)
[2023-03-29 06:19:22,979] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:19:22,988] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:19:22,997] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:19:23,001] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:24:21,649] INFO [Controller id=0] New topics: [HashSet(registered_users)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_users,Some(_YLAcAgPSbe2TquPcndm0g),Map(registered_users-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:24:21,649] INFO [Controller id=0] New partition creation callback for registered_users-0 (kafka.controller.KafkaController)
[2023-03-29 06:24:23,001] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:24:23,002] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:24:23,004] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:24:23,004] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:27:48,808] DEBUG [Controller id=0] Delete topics listener fired for topics registered_user_2_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:27:48,809] INFO [Controller id=0] Starting topic deletion for topics registered_user_2_partition (kafka.controller.KafkaController)
[2023-03-29 06:27:48,812] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:48,814] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:48,874] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_user_2_partition-1 -> NONE, registered_user_2_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:27:48,876] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_user_2_partition,Partition=1,Replica=0],[Topic=registered_user_2_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:48,878] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:48,907] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:48,909] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:27:48,910] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:27:48,976] INFO [Controller id=0] New topics: [HashSet(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(HDtHmgJ1RoCIE4XsCudo7w),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:27:48,976] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0 (kafka.controller.KafkaController)
[2023-03-29 06:27:57,967] DEBUG [Controller id=0] Delete topics listener fired for topics registered_user_2_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:27:57,967] INFO [Controller id=0] Starting topic deletion for topics registered_user_2_partition (kafka.controller.KafkaController)
[2023-03-29 06:27:57,967] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:57,967] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:57,980] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_user_2_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:27:57,980] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_user_2_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:57,980] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:57,992] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:27:57,993] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:27:57,994] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:27:58,076] INFO [Controller id=0] New topics: [HashSet(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(RKtn0-OtTqa8I0UY8pVXQQ),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:27:58,077] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0 (kafka.controller.KafkaController)
[2023-03-29 06:28:12,062] DEBUG [Controller id=0] Delete topics listener fired for topics registered_user_2_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:12,062] INFO [Controller id=0] Starting topic deletion for topics registered_user_2_partition (kafka.controller.KafkaController)
[2023-03-29 06:28:12,063] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:12,063] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:12,075] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_user_2_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:28:12,075] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_user_2_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:12,075] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:12,089] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:12,090] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:28:12,091] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:19,730] DEBUG [Controller id=0] Delete topics listener fired for topics registered_users_1_part to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:19,730] INFO [Controller id=0] Starting topic deletion for topics registered_users_1_part (kafka.controller.KafkaController)
[2023-03-29 06:28:19,731] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_users_1_part (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:19,731] INFO [Topic Deletion Manager 0] Deletion of topic registered_users_1_part (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:19,742] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_users_1_part-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:28:19,742] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_users_1_part,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:19,743] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_users_1_part (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:19,758] INFO [Topic Deletion Manager 0] Deletion of topic registered_users_1_part successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:19,760] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:28:19,761] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:26,159] DEBUG [Controller id=0] Delete topics listener fired for topics message_to_fix_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:26,159] INFO [Controller id=0] Starting topic deletion for topics message_to_fix_partition (kafka.controller.KafkaController)
[2023-03-29 06:28:26,159] INFO [Topic Deletion Manager 0] Handling deletion for topics message_to_fix_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:26,159] INFO [Topic Deletion Manager 0] Deletion of topic message_to_fix_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:26,171] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(message_to_fix_partition-1 -> NONE, message_to_fix_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:28:26,171] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=message_to_fix_partition,Partition=1,Replica=0],[Topic=message_to_fix_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:26,171] INFO [Topic Deletion Manager 0] Handling deletion for topics message_to_fix_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:26,188] INFO [Topic Deletion Manager 0] Deletion of topic message_to_fix_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:26,190] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:28:26,190] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:31,278] DEBUG [Controller id=0] Delete topics listener fired for topics registered_users to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:28:31,278] INFO [Controller id=0] Starting topic deletion for topics registered_users (kafka.controller.KafkaController)
[2023-03-29 06:28:31,279] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_users (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:31,279] INFO [Topic Deletion Manager 0] Deletion of topic registered_users (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:31,288] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_users-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:28:31,289] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_users,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:31,289] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_users (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:31,302] INFO [Topic Deletion Manager 0] Deletion of topic registered_users successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:28:31,303] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:28:31,304] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:29:08,420] INFO [Controller id=0] New topics: [Set(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(xW9xurR-T_WRH1mQYpsb-g),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), registered_user_2_partition-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:29:08,420] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0,registered_user_2_partition-1 (kafka.controller.KafkaController)
[2023-03-29 06:29:23,005] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:29:23,005] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:29:23,007] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:29:23,007] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:31:46,713] DEBUG [Controller id=0] Delete topics listener fired for topics registered_user_2_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:31:46,713] INFO [Controller id=0] Starting topic deletion for topics registered_user_2_partition (kafka.controller.KafkaController)
[2023-03-29 06:31:46,713] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:31:46,713] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:31:46,723] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_user_2_partition-1 -> NONE, registered_user_2_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:31:46,724] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_user_2_partition,Partition=1,Replica=0],[Topic=registered_user_2_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:31:46,724] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:31:46,738] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:31:46,740] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:31:46,741] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:31:48,817] INFO [Controller id=0] New topics: [Set(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(3fwRKxZrSQienVW1oOsIqw),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:31:48,817] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0 (kafka.controller.KafkaController)
[2023-03-29 06:32:05,525] DEBUG [Controller id=0] Delete topics listener fired for topics registered_user_2_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:32:05,525] INFO [Controller id=0] Starting topic deletion for topics registered_user_2_partition (kafka.controller.KafkaController)
[2023-03-29 06:32:05,525] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:05,525] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:05,534] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_user_2_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:32:05,534] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_user_2_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:05,534] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:05,545] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:05,546] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:32:05,547] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:32:10,553] INFO [Controller id=0] New topics: [Set(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(f82A1BkITfuSS2td7n14Kg),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), registered_user_2_partition-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:32:10,553] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0,registered_user_2_partition-1 (kafka.controller.KafkaController)
[2023-03-29 06:32:14,844] DEBUG [Controller id=0] Delete topics listener fired for topics registered_user_2_partition to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:32:14,845] INFO [Controller id=0] Starting topic deletion for topics registered_user_2_partition (kafka.controller.KafkaController)
[2023-03-29 06:32:14,845] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:14,845] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition (re)started (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:14,854] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(registered_user_2_partition-1 -> NONE, registered_user_2_partition-0 -> NONE) (kafka.controller.KafkaController)
[2023-03-29 06:32:14,854] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=registered_user_2_partition,Partition=1,Replica=0],[Topic=registered_user_2_partition,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:14,854] INFO [Topic Deletion Manager 0] Handling deletion for topics registered_user_2_partition (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:14,865] INFO [Topic Deletion Manager 0] Deletion of topic registered_user_2_partition successfully completed (kafka.controller.TopicDeletionManager)
[2023-03-29 06:32:14,866] INFO [Controller id=0] New topics: [Set()], deleted topics: [HashSet()], new partition replica assignment [Set()] (kafka.controller.KafkaController)
[2023-03-29 06:32:14,867] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2023-03-29 06:32:37,363] INFO [Controller id=0] New topics: [Set(registered_user_2_partition)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(registered_user_2_partition,Some(9QysnU06TbaJMtvThWJbfg),Map(registered_user_2_partition-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), registered_user_2_partition-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2023-03-29 06:32:37,364] INFO [Controller id=0] New partition creation callback for registered_user_2_partition-0,registered_user_2_partition-1 (kafka.controller.KafkaController)
[2023-03-29 06:34:23,007] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:34:23,015] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:34:23,017] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:34:23,017] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:39:23,017] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:39:23,018] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:39:23,020] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:39:23,020] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:44:23,021] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:44:23,021] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:44:23,023] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:44:23,023] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:49:23,023] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:49:23,031] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:49:23,033] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:49:23,033] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:54:23,033] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:54:23,041] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:54:23,042] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:54:23,042] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2023-03-29 06:59:23,042] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2023-03-29 06:59:23,050] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2023-03-29 06:59:23,051] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2023-03-29 06:59:23,051] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
